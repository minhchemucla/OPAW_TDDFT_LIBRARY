subroutine libxc_drive(ngrp,dens,sigma,exc,vxc,func)
  use xc_f90_types_m
  use xc_f90_lib_m
  use xch_modu,  only : omega=>gamma 
  use main,      only : nx, ny, nz, dx, dy, dz

  !ERASE
  use mpi_lib_ours, only : rank, sync_mpi

  implicit none

  !local dummy
  integer   :: ix, iy, iz, ii


  !from the DFT code
  integer :: ngrp
  real*8  :: dens(ngrp), sigma(ngrp), exc(ngrp), vxc(ngrp)
  !
  real*8  :: v1mul(ngrp), v2mul(ngrp), vsigma(ngrp)
  real*8  :: den_eps(ngrp)
  integer :: func
  ! %% functional list allowed right now
  !    1 - LDAx
  !    2 - LDAc (Perdew & Wang) 
  !    3 - PBEx revised 
  !    4 - PBEc 
  !    5 - wPBEx



  !local vars for linking
  TYPE(xc_f90_pointer_t) :: xc_func
  TYPE(xc_f90_pointer_t) :: xc_info
  integer :: i, vmajor, vminor, vmicro, func_id 
  real*8 :: zero_r8=0.d0, one_r8=1.d0

  select case(func)
  case(1)
    func_id=1
  case(2) 
    func_id=12
  case(3)
    func_id=101
  case(4)
    func_id=130
  case(5)
    func_id=524 !478 !524=hse LR !478=LC_WPBE by Vydrov&Scuseria
  case default
    stop "WRONG SELECTION OF FUNCTIONAL IN LIBXC_DRIVER!"
  end select

  
  call xc_f90_func_init(xc_func, xc_info, func_id, XC_UNPOLARIZED)
  
  write(6,*) "GAMM=",omega
  if(omega.gt.1e-6) then
    if(rank==0) then; write(6,*)  "ENTER omega =",omega; call flush(6); end if
    call xc_f90_gga_x_wpbeh_set_par(xc_func,omega)
    if(rank==0) then; write(6,*)  "Hybrid LIBXC!",omega; call flush(6); end if
    call sync_mpi
  end if

  select case (xc_f90_info_family(xc_info))
  case(XC_FAMILY_LDA)
    call xc_f90_lda_exc_vxc(xc_func, ngrp, dens(1), exc(1),vxc(1))
  case(XC_FAMILY_GGA,XC_FAMILY_HYB_GGA)
    !
    ! note the structure:
    !  vmul is the multiplicative part of the potential
    !  the total potential has another term: -2 Div* (vsigma*Grad(dens))
    !
    call xc_f90_gga_exc_vxc(xc_func, ngrp, dens(1), sigma(1), exc(1), v1mul(1), vsigma(1))
    
    where(sigma==0) vsigma=0.d0
    den_eps = dens
    where(den_eps.lt.1E-10) den_eps=0.d0

    call gga_pot2(ngrp, den_eps, vsigma,v2mul)

    vxc = v1mul + v2mul

   end select

  call xc_f90_func_end(xc_func)

end subroutine

subroutine gga_pot2(n, dens, vsigma,v2mul)
  use main,      only : nx, ny, nz, dx, dy, dz
  implicit none
  integer   :: idir, n
  real*8    :: dens(n), denshlf(n), vsigma(n), v2mul(n), divv(n) 
  real*8    :: vs_gd(n,3), gdvc(n,3)

  denshlf = 0.5d0*dens

  call grad_vec(nx, dx, ny, dy, nz, dz, denshlf, gdvc)

  do idir = 1,3
    vs_gd(:,idir) = vsigma(:) * gdvc(:,idir)  
  end do


  call divrg(nx, dx, ny, dy, nz, dz, vs_gd, divv)

  v2mul = -2.d0*divv !factor of two due to derivative of |nabla n|^2

end subroutine

